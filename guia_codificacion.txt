Es de suma importancia que nosotros tengamos una forma estandarizada de
codificación y siempre nos concentremos en codificar de la misma manera,
recordemos que muy probablemente a nuestros proyectos les tengamos que dar
mantenimiento o tengamos que incorporar más desarrolladores al mismo, en
cualquier caso, codificar bajo un estándar nos permitirá crear proyectos de
más alta calidad.

En Python existe los PEP's, Mejoras de propuestas de Python, de los cuales al
momento de codificar nos interesa PEP8.

PEP8 Es una guía de codificación, la cual nos permite escribir código Python de
una manera, mucho más legible y de forma consistente, a través de ciertas
"reglas" y recomendaciones. Por ejemplo, en la guía podemos encontrar:

utilizar espacios sobre tabs.
utilizar la nomenclatura de snake case para nombrar variables.
utilizar palabras en mayúsculas para las constantes.
Colocó "reglas" entre comillas ya que nosotros podemos crear un programa cien
por ciento funcional sin habernos guiado de PEP8, simplemente siendo constantes
al momento de codificar.

Si por algún motivo creemos que nuestra forma de codificar Python es errónea o
queremos implementar al pie de la letra la guía, podemos validar nuestro código
en la siguiente página web :
http://pep8online.com/
, basta con copiar el código del cual tenemos duda y
validar.

Si quieres crear una librería, te recomiendo validar todo tu código.


== o is

== O IS
En el vídeo de Operadores relacionales y lógicos mencianamos que es posible
conocer si dos valores enteros son iguales mediante el uso de == y la palabra
 reservada is; Sin embargo, ahora que ya contamos con más conocimiento del que
 teníamos en ese vídeo es importante conocer cuando usaremos == y cuando usaremos
  is. Veamos.

Si ejecutamos la siguiente línea de código obtendremos como resultado True.

[1,2,3] == [1,2,3]
Eso de deben a que ambas listas son iguales. Ahora, ¿Qué pasa si reemplazamos ==
por is?

[1,2,3] is [1,2,3]
En este casa obtenemos False; Esto se debe a que con == compararemos que dos
valores sean iguales y con is compareremos que dos objetos sean iguales, cosas
completamente diferentes.

Veamos un par de ejemplos para que nos quede más en claro.

a = [1,2,3]
b = [1,2,3]
A la primera lista la llamaremos a y a la segunda b.

Si imprimimos el id de cada objeto, observaremos que son valores completamente
diferentes, con lo cual concluimos que son dos objetos diferentes.

print(id(a))
print(id(b))
Si ejecutamos.

a = [1, 2, 3]
b = a

a is b
Obtendremos cómo resultado True, debido a que a y b son el mismo objeto.

En conclusión == nos permite saber si dos objetos son iguales, mientras que is
nos permite conocer si cuando los objetos son los mismos.

Anotaciones
información extra para especificar más un función, guias para que el codigo sea
más legible
def saludo(nombre : str) -> None:
  print("hola" + nombre)

def suma(val1 : int, val2 : int = 100) -> int:
  return val1 + val2

print(suma(10))
nombre = "Miguel"
saludo(nombre)


Comprehension

lista = []

for x in range(0,101):
    lista.append(x)

print(lista)

estructura = [ x for x in range(0, 101)]
print(estructura)
estructura = tuple((x for x in range(0, 101)
                              if x % 2 == 0))
print(estructura)

diccionario = { indice:valor
                for indice, valor in enumerate(estructura)}

print(diccionario)

¿QUÉ SIGUE AHORA?
Si te encuentras leyendo, esto muy probablemente hayas concluido el curso profesional de Python. Quizás te estés preguntando ¿Qué sigue ahora? ¿Donde puedo aplicar mis conocimientos? ¿Qué proyecto puedo realizar?. Este pequeño post es para aclarar esas interrogantes. Verás, como mencionamos anteriormente o como tú ya habrás podido investigar, Python tiene muchísimas áreas donde puede ser aplicado, ciencias computacionales, ciencias de datos, análisis matemáticos, python del lado del servidor ya sea para páginas web dinámicas, para servidor de archivos, para crear APIs, generar micro servicios, python del lado del cliente, para consumir servicios web, interfaces gráficas, modelados en 2D o 3D, vaya la cantidad de cosas que podemos hacer es sin duda muy grande (Casi de todo).

Afortunadamente en CódigoFacilito tenemos una biblioteca de cursos, talleres, artículos y vídeos los cuales puedes tomar sin ningún tipo de problema (Ya tienes las bases y más). Todo este contenido te permitirán subir de nivel con desarrollador Python, con temas completamente nuevos y desafiantes.

WEB
Actualmente una de las áreas que más esta creciendo es la programación para aplicaciones webs. Si lo tuyo es esta área, habrá dos frameworks que tengo que recomendarte, Flask y Django, con ambos puedes crear una página web, cien por ciento funcional, listo para que los usuarios la utilicen, con muy pocas líneas de código y claro, en muy poco tiempo.

Si tus conocimientos son nulos acerca de web, te recomiendo que comiences con el curso de Flask , la curba de aprendizaje es muy baja y solo tendrás código que necesites.

Si por el otro lado, ya cuentas con conocimientos de web o quieres realizar un proyecto mucho más robusto, puedes tomar el curso de Django. Una vez termines el curso, puedes tomar el curso de Administrador de proyectos para aprender más a fondo este Framework Web.

Si tu aplicacion ya esta lista, nada mejor que tenga su propia API y con los talleres de REST API con Django y Crea una REST API con Flask podrás lograrlo.

Para complementar ambos cursos y talleres puedes ver los siguientes vídeos

Ajax con Django

Deploy de Python en Heroku

BASE DE DATOS
Es inegable que ahora todos nuestro programas deben de tener una base de datos, así que el curso de Base de datos con Python es completamente obligatorio.

En este curso trabajamos con dos motores de bases de datos, MySQL y MondoDB. Trabajamos con SQL (Lenguaje estructurado de consultas), con un ORM (Mapeo de objetos relacionales) y claro con diccionarios.

DEL LADO DEL CLIENTE
Por parte del cliente, no nos quedamos atrás, tenemos un curso y un taller que involucran temas web.

El curso de consumir APIs con Python te permitirá trabajar con los diccionarios más afondo, así como comenzar a realizar peticiones con el protocolo HTTP, una vez sepas como consumir un servicio web dejame decirte que estas listo para lo que sea.

Por otro lado tenemos el taller de web scrapper con Python donde te enseñamos a como obtener datos de una página web simulando ser un usuario. En este taller de igual forma trabajaremos con MongoDB.

MANEJO DE IMÁGENES
Algo a lo que le podemos sacar mucho provecho es a la manipulación de imagenes, en el curso de Imagenes con Python podrás crear y editar las imágenes que desees con solo una librería.

BOTS
Uno de los cursos donde prácticamente aplicarás todos los conocimientos de todos los cursos y talleres mencionados anteriormente será el curso de creación de bots. En este curso te enseñamos a realizar un bot de facebook messenger, trabajamos con una base de datos, con threads, con un servidor web, consumimos un servicio web de Facebook y ya no se digan las listas, tuplas, diccionarios, funciones, clases etc...

De hecho uno podría pensar que el único taller que no está involucrado es el de manipulación de imágenes, pero no es así, ya que tenemos el taller de Manejo de servicios cognitivos de microsoft donde a nuestro bot le agregamos la funcionalidad de modificar una imagen que un cliente nos mande.



Mountain View

AÚN NO SE ACABA
En Código Facilito estamos siempre en constante actualización, de tal manera que siempre nos encontramos sacando cursos y talleres completamente nuevos, siempre pensando en lo que los desarrolladores necesitan para su vida profesional. Así que no te preocupes si el curso que estabas buscando no lo encontraste en este post, muy probablemente ya se encuentre en desarrollo por parte del equipo y si no es así, no dudes en comentarlo :D.

Spoiler se vienen cursos y talleres de Pruebas unitarias, Videojuegos Y Programación concurrente

Actualización ya contamos con el nuevo Curso de testing.
